---
#
# This playbook sets up a new project and utilises OpenShift NetworkPolicy,
# and isolates the project network from other prjects' networks. It also
# sets project admin role to given user.
#
#
# parameters (remember to put secrets into vault):
# * user
# * api_url
# * api_key
# * project_name
# * cb_email - your email to use to register to Let's Encrypt
# * cb_image - which container image and version to use
# * cb_route_label - which label is used for finding the routes to SSL
# * cb_extra_opts - any certbot extra options, like '--test'
# * state present/absent
#
# e.g. K8S_AUTH_VERIFY_SSL=no ansible-playbook certbot-playbook.yml \
#        -i "localhost ansible_connection=local" \
#        -c local
#        -e api_url=https://api.ocp.fi -e user=kube-admin \
#        -e api_key=SMj1HWD9bJrEnvTR0JLR-EMGeeb_eDsaMnB-92-skno \
#        -e project_name=fevermap \
#        -e cb_extra_opts='--test' \
#        -e cb_email=you@example.com \
#        -e state=present

- name: Set SSL Certs using Let\'s encrypt
  hosts: all
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    certbot_sa: certbot
    cb_image: quay.io/fevermap/certbot-ocp:latest
    cb_route_label: 'letsencrypt-me=true'
    cb_extra_opts: '--test'
  tasks:

    - name: Create certbot Service Account
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ certbot_sa }}"
            namespace: "{{ project_name }}"

    - name: Create RBAC role for certbot
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: certbot
          rules:
          - apiGroups:
              - route.openshift.io
            resources:
              - routes
            verbs:
              - patch
              - create
              - delete
              - get
              - list

    - name: Bind certbot SA to role able to modify routes
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            labels:
              app: certbot-ocp
            name: "{{ certbot_sa }}"
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: User
              name:
                "system:serviceaccount:{{ project_name }}:{{ certbot_sa }}"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: certbot

    - name: Create persistent volume for Let\'s Encrypt data
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            finalizers:
            - kubernetes.io/pvc-protection
            name: certbot-letsencrypt
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: 20Mi

    - name: Create Deployment Config for certbot service
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: apps.openshift.io/v1
          kind: DeploymentConfig
          metadata:
            labels:
              app: certbot-ocp
              app.kubernetes.io/component: certbot-ocp
              app.kubernetes.io/instance: certbot-ocp
            name: certbot-ocp
          spec:
            replicas: 0
            revisionHistoryLimit: 3
            selector:
              app: certbot-ocp
              deploymentconfig: certbot-ocp
            strategy:
              rollingParams:
                intervalSeconds: 1
                maxSurge: 25%
                maxUnavailable: 25%
                timeoutSeconds: 600
                updatePeriodSeconds: 1
              type: Rolling
            template:
              metadata:
                labels:
                  app: certbot-ocp
                  deploymentconfig: certbot-ocp
              spec:
                containers:
                - env:
                  - name: ROUTE_LABEL
                    value: "{{ cb_route_label }}"
                  - name: EMAIL
                    value: "{{ cb_email }}"
                  - name: CERTBOT_EXTRA_OPTS
                    value: "{{ cb_extra_opts }}"
                  image: "{{ cb_image }}"
                  imagePullPolicy: IfNotPresent
                  livenessProbe:
                    failureThreshold: 3
                    httpGet:
                      path: /.well-known/acme-challenge/alive.html
                      port: 8080
                      scheme: HTTP
                    initialDelaySeconds: 5
                    periodSeconds: 1
                    successThreshold: 1
                    timeoutSeconds: 2
                  name: certbot-ocp
                  ports:
                  - containerPort: 8080
                    protocol: TCP
                  readinessProbe:
                    failureThreshold: 3
                    httpGet:
                      path: /.well-known/acme-challenge/alive.html
                      port: 8080
                      scheme: HTTP
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 2
                  volumeMounts:
                  - mountPath: /etc/letsencrypt
                    name: letsencrypt
                dnsPolicy: ClusterFirst
                restartPolicy: Always
                serviceAccount: "{{ certbot_sa }}"
                serviceAccountName: "{{ certbot_sa }}"
                terminationGracePeriodSeconds: 10
                volumes:
                - name: letsencrypt
                  persistentVolumeClaim:
                    claimName: certbot-letsencrypt
            test: false
    - name: Create certbot service
      k8s:
        state: "{{ state }}"
        host: "{{ api_url }}"
        username: "{{ user }}"
        api_key: "{{ api_key }}"
        namespace: "{{ project_name }}"
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: certbot-ocp
            name: certbot-ocp
          spec:
            ports:
            - name: 8080-tcp
              port: 8080
              protocol: TCP
              targetPort: 8080
            selector:
              deploymentconfig: certbot-ocp
            sessionAffinity: None
            type: ClusterIP

    # - name: Clean up generated routes
    #   tags: clean
    #   k8s:
    #     state: "{{ state }}"
    #     host: "{{ api_url }}"
    #     username: "{{ user }}"
    #     api_key: "{{ api_key }}"
    #     definition:
    #       "{{ lookup('k8s',
    #        namespace={{ project_name }},
    #        kind='Route',
    #        label_selector='app=certbot-ocp')
    #       }}"
    #   when: state == 'absent'