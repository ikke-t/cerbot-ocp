#!/usr/bin/env bash
#
# This builds a container for creating and renewing SSL certs in OpenShift
# project by utilizing Let's Encrypt certbot and Apache
#
# Mandatory Parameters:
#
# * EMAIL: passed to Let's Encrypt via certbot.
#
# Optional Parameters:
#
# * ROUTE_LABEL: as parameter to recognize which routes to setup SSL for.
# * CERTBOT_EXTRA_OPTS: passes additional parameters for certbot.
#   E.g. --test would be good while practising.
# * TRASH_ALL: deletes all /etc/letsencrypt contents. Used to force getting
#   new certs.
# * CERTBOT_SERVICE_NAME: certbot service name, defaults to certbot-ocp
#

set -o errexit
shopt -s expand_aliases

echo 'get container base image'
container=$(buildah from ubi8/ubi-minimal)
alias brc="buildah run --user root $container"

echo 'install packages'
brc microdnf install openssl python3-pip httpd >/dev/null
brc microdnf clean all
brc sed -i 's/Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf

# XXX fix below, I could not get httpd logs into stdout/stderr for some reason.
brc sed -i  's,logs/access_log,/proc/self/fd/1,' /etc/httpd/conf/httpd.conf
brc sed -i  's,logs/error_log,/proc/self/fd/2,' /etc/httpd/conf/httpd.conf
#brc sed -i  's,logs/access_log,/dev/stdout,' /etc/httpd/conf/httpd.conf
#brc sed -i  's,logs/error_log,/dev/stderr,' /etc/httpd/conf/httpd.conf
#brc sed -i  's,"logs/access_log",!/bin/cat,' /etc/httpd/conf/httpd.conf
#brc sed -i  's,"logs/error_log",!/bin/cat,' /etc/httpd/conf/httpd.conf

#
# Get oc command line client
#
echo 'install oc-client'
file=$(mktemp oc-XXXX)
curl -sL https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | \
  tar xz --to-stdout --warning=no-unknown-keyword -f - \
  openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc > \
  $file

buildah copy $container $file /bin/oc
rm $file
brc chmod +x /bin/oc

#
# Install certbot tool
#
echo 'install certbot tool'
brc pip3 install certbot
brc mkdir /var/log/letsencrypt /etc/letsencrypt /var/lib/letsencrypt
brc mkdir -p /var/www/html/.well-known/acme-challenge
brc chgrp root /var/run/httpd /var/lib/httpd
brc chmod -R g+rw /etc/letsencrypt /var/www/html/.well-known \
    /var/log/letsencrypt /var/lib/letsencrypt /var/run/httpd /var/lib/httpd
brc chmod -R g+rwx /var/log/httpd

  echo 'create scripts'
#
# create entrypoint starter script which starts nginx and runs certbot
#
file=$(mktemp start-XXXX)
cat > $file <<EOF
#!/bin/env bash
# start webserver
httpd

label="${ROUTE_LABEL:-letsencrypt-me=true}"
svcname="${CERTBOT_SERVICE_NAME:-certbot-ocp}"

if [ "\$TRASH_ALL" == "true" ]; then
  echo "delete all old certs"
  rm -rf /etc/letsencrypt/*
fi

# for all domains, do register
oc get routes -l \$label \
  -o custom-columns="name:.metadata.name, hostname:.spec.host" --no-headers \
  > /tmp/routes.txt
i=0
while read route; do
  echo \$route
  IFS=' ' read -ra ary <<< \$route
  echo 'temporarily disable redirect for non TLS traffic'
  oc patch "route/\${ary[0]}" \
    -p '{"spec":{"tls": {"insecureEdgeTerminationPolicy":"Allow"}}}'

  echo "check if route for for \${ary[0]}-acme-challenge"
  if [ ! $(oc get route "\${ary[0]}-acme-challenge" &> /dev/null) ]; then
    echo "exposing service for \${ary[0]}-acme-challenge"
    oc expose service \$svcname \
      --path=/.well-known/acme-challenge \
      --port=8080 \
      --name="\${ary[0]}-acme-challenge" \
      -l 'certbot-ocp-delete-me-if-found-later=true' \
      --hostname=\${ary[1]}
    echo "return value of expose: \$?"
  fi
  echo check acme-challenge is up for: \${ary[0]},\${ary[1]}
  until [[ \$(curl --output /dev/null --silent --head --fail \
    http://\${ary[1]}/.well-known/acme-challenge/alive.html) ]] || \
    [[ \$i -eq 10 ]]; do
    printf '.'
    sleep 2
    i=\$((\$i+1))
  done
  echo Waiting things to settle down
  sleep 5
  if [ ! -d /etc/letsencrypt/live/\${ary[1]} ]; then
    echo asking for certs
    certbot certonly --webroot -w /var/www/html \
    --agree-tos -m \$EMAIL --deploy-hook /opt/app-root/patch.sh \
    -n \$CERTBOT_EXTRA_OPTS \
    -d \${ary[1]}
    echo result from certs: $?
  fi
done < /tmp/routes.txt

# renew all existing ones if needed
certbot renew --deploy-hook /opt/app-root/patch.sh

oc delete route -l certbot-ocp-delete-me-if-found-later=true

while read route; do
  IFS=' ' read -ra ary <<< \$route
  echo "enable back redirect for non TLS traffic for \${ary[0]}"
  oc patch "route/\${ary[0]}" \
    -p '{"spec":{"tls": {"insecureEdgeTerminationPolicy":"Redirect"}}}'
done < /tmp/routes.txt

EOF

buildah copy $container $file /opt/app-root/certs.sh
rm $file
brc chmod g+rx /opt/app-root/certs.sh

#
# do post hook for certbot that puts the certs and keys into routes
#
file=$(mktemp patch-XXXX)
cat > $file <<EOF
#!/bin/env bash
# just in case, get the renewed domains into array,
# even though we should only get one.
echo "patch working on: \${RENEWED_DOMAINS}"

IFS=' ' read -ra fqdns <<< \$RENEWED_DOMAINS

CERT_FILE=\${RENEWED_LINEAGE}/cert.pem
CERTIFICATE="\$(awk '{printf "%s\\\\n", \$0}' \${CERT_FILE})"
KEY_FILE=\${RENEWED_LINEAGE}/privkey.pem
KEY="\$(awk '{printf "%s\\\\n", \$0}' \${KEY_FILE})"
CABUNDLE_FILE=\${RENEWED_LINEAGE}/fullchain.pem
CABUNDLE=\$(awk '{printf "%s\\\\n", \$0}' \${CABUNDLE_FILE})

# find out the ocp route name from the array of routes and their fqdn
while read route; do
  IFS=' ' read -ra ary <<< \$route
    if [[ "\${fqdns[0]}" == "\${ary[1]}" ]]; then
      ROUTE=\${ary[0]}
      echo "patch found route \${ROUTE}"
      break
    fi
done < /tmp/routes.txt

if [[ -n "\${ROUTE}" && -n "\${CERTIFICATE}" && -n "\${CABUNDLE}" ]]; then
  echo "patching route \${ROUTE}"
  oc patch "route/\${ROUTE}" \
   -p '{"spec":{"tls":{"certificate":"'"\${CERTIFICATE}"'", \
   "key":"'"\${KEY}"'", "caCertificate":"'"\${CABUNDLE}"'"}}}'
  expire_date=\$(openssl x509 -in \${CERT_FILE} -noout -enddate | cut -d= -f 2)
  oc patch "route/\${ROUTE}" \
   -p '{"metadata":{"annotations": \
   {"certbot-ocp/certiticate-expires":"'"\${expire_date}"'"}}}'
else
  echo "problem with one of the variables:"
  echo "route: \${ROUTE}"
  echo "certificate: \${CERTIFICATE}"
  echo "key:\${KEY}"
  echo "caCertificate: \${CABUNDLE}"
  exit 1
fi
EOF

buildah copy $container $file /opt/app-root/patch.sh
brc chmod g+rx /opt/app-root/patch.sh
rm $file

brc sh -c 'echo alive > /var/www/html/.well-known/acme-challenge/alive.html'

buildah config \
  --entrypoint /opt/app-root/certs.sh \
  --cmd '/opt/app-root/certs.sh' \
  --author 'Ilkka Tengvall' \
  --created-by 'Ilkka Tengvall' \
  --comment 'Image is used in OpenShift for creating SSL certs. \
    See https://github.com/ikke-t/cerbot-ocp' \
  --port 8080 \
  --volume /etc/letsencrypt \
  --workingdir /opt/app-root \
  $container

echo 'store container'
buildah commit --format docker $container certbot-mini:latest
